/* --------------------------------------------------------
   VERSIONSINFOS
   --------------------------------------------------------
   
   Version: 2.2
   Autor:   Frederik Held
   Datum:   17.11.2010
   
   Hardware:
   - Einfahrt in die Stationen wird per Reed-Kontakt gemeldet. Diese werden wie Touch-Sensoren programmiert.
     Nachteil: Im Gegensatz zu den Lichtsensoren kann nicht erkannt werden, ob sich ein Zug zur Zeit in der
               Station befindet, sondern es wird nur die Vorbeifahrt detektiert.
     Vorteil: Funktioniert absolut zuverlässig unabhängig vom Umgebungslicht.
   - Trigger-Sensor in Form eines Reflexionslichttasters (BOS 6K-PU-1YC-S75-C von BALLUFF) nachgerüstet. Dieser gibt
     als "aus" ~704 und als "ein" 1023 zurück.
     
   -------------------------------------------------------- */


/* --------------------------------------------------------
   VARIABLEN UND KONSTANTEN
   -------------------------------------------------------- */

/* EINSTELLUNGEN */

#define OUTPUT_TRAIN OUT_A                                  // Port, über den der Zug mit Spannung versorgt wird
#define OUTPUT_TRIGGER OUT_C                                // Port, über den der Trigger-Sensor mit Spannung versorgt wird

#define INPUT_STATION_1 SENSOR_1                            // Port, auf dem der Reed-Kontakt in Station 1 sein Signal liefert
#define INPUT_STATION_2 SENSOR_2                            // Port, auf dem der Reed-Kontakt in Station 2 sein Signal liefert
#define INPUT_TRIGGER SENSOR_3                              // Port, auf dem der Trigger-Sensor sein Signal liefert

#define VALUE_TRIGGER 800                                   // Wert, bei dem der Trigger-Sensor schalten soll

#define POWER_TRAIN 3                                       // "Geschwindigkeit" des Zuges
#define TIME_IN_STATION 1000                                // Zeit in ms, die der Zug in der Station bleibt
#define DELAY_SLOW_DOWN 20                                  // Verzögerung beim Abbremsen des Zuges


/* VARIABLEN DEFINIEREN */

int counter;


/* --------------------------------------------------------
   TASKS
   -------------------------------------------------------- */

/* Aktualisiert die Anzeige etc. */
task Update () {

     SetUserDisplay (counter, 0);
     
     Wait (100);

}


/* --------------------------------------------------------
   FUNKTIONEN
   -------------------------------------------------------- */

/* STEUERUNG DES PROGRAMMABLAUFS */

/* Initialisiert Variablen, Sensoren, etc. */
void Init () {

     // Variablen:
     int counter = 0;
     
     // Sensoren:
     SetSensorType (INPUT_STATION_1, SENSOR_TYPE_TOUCH);
     SetSensorMode (INPUT_STATION_1, SENSOR_MODE_BOOL);
     SetSensorType (INPUT_STATION_2, SENSOR_TYPE_TOUCH);
     SetSensorMode (INPUT_STATION_2, SENSOR_MODE_BOOL);
     // der Trigger-Sensor muss hier nicht initialisiert werden.
     
     // Display:
     SetUserDisplay (counter, 0);
     
}


/* STEUERUNG DES TRIGGER-SENSORS */

void ActivateTrigger () {
    SetPower (OUTPUT_TRIGGER, OUT_FULL);
    On (OUTPUT_TRIGGER); // Der Sensor muss ihr schon mit Strom versorgt werden, sonst funktioniert die Einstellung von Type und Mode nicht!
    SetSensorType (INPUT_TRIGGER, SENSOR_TYPE_NONE);
    SetSensorMode (INPUT_TRIGGER, SENSOR_MODE_RAW);
}

void DeactivateTrigger () {
    Off (OUTPUT_TRIGGER);
}


/* STEUERUNG DES ZUGES */

void TrainSlowDown (int curr_power, int delay) {
     int power = curr_power;
     until (power == 0) {
           power = power - 1;
           SetPower (OUTPUT_TRAIN, power);
           Wait (delay);
     }
     Off (OUTPUT_TRAIN);
     SetPower (OUTPUT_TRAIN, curr_power);
}


/* ZUSTÄNDE DES ZUGES */

void InS1 () {

     // in:
     TrainSlowDown (POWER_TRAIN, DELAY_SLOW_DOWN);
     ActivateTrigger ();
     
     // event:
     until (INPUT_TRIGGER > VALUE_TRIGGER);
     
     // out:
     /* --- */
     
}

void S1ToS2 () {

     // in:
     DeactivateTrigger ();
     SetPower (OUTPUT_TRAIN, POWER_TRAIN);
     OnFwd (OUTPUT_TRAIN);
     counter++;
     
     // event:
     until (INPUT_STATION_2 == true);
     
     // out:
     /* --- */
     
}

void InS2 () {

     // in:
     TrainSlowDown (POWER_TRAIN, DELAY_SLOW_DOWN);
     ActivateTrigger ();
     
     // event:
     until (INPUT_TRIGGER > VALUE_TRIGGER);
     
     // out:
     /* --- */
}

void S2ToS1 () {

     // in:
     DeactivateTrigger ();
     SetPower (OUTPUT_TRAIN, POWER_TRAIN);
     OnRev (OUTPUT_TRAIN);
     counter++;
     
     // event:
     until (INPUT_STATION_1 == true);
     
     // out:
     /* --- */
     
}


/* --------------------------------------------------------
   TASKS
   -------------------------------------------------------- */

task main () {

     Init ();
     ActivateTrigger ();
     
     start Update;
     
     while (true) {
     
           S2ToS1 ();
           
           InS1 ();
           
           S1ToS2 ();
           
           InS2 ();
           
     }

}
